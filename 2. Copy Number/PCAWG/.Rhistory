labs(title = which_sbs) +
facet_wrap(~variable, scales = 'free')
cowplot::plot_grid(
vaf_deconvolution_plot,
drug_exposure_plot,
rel_heights = c(1, 5)
)
cowplot::plot_grid(
vaf_deconvolution_plot,
drug_exposure_plot,
rel_heights = c(1, 5),
ncol = 1
)
vaf_deconvolution_plot = ggplot(input_vafs %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_brewer(palette = 'Set1') +
labs(title = which_sbs) +
facet_wrap(~variable)
cowplot::plot_grid(
vaf_deconvolution_plot,
drug_exposure_plot,
rel_heights = c(1, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
figure = cowplot::plot_grid(
vaf_deconvolution_plot,
drug_exposure_plot,
rel_heights = c(1, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(figure, '~/Downloads/a.png', width = 10, height = 15)
ggsave(plot = figure, '~/Downloads/a.png', width = 10, height = 15)
figure = cowplot::plot_grid(
vaf_deconvolution_plot + labs("Deconvolution"),
drug_exposure_plot  + labs("Signature assignments"),
rel_heights = c(1.5, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(plot = figure, '~/Downloads/a.png', width = 10, height = 15)
ggsave(plot = figure, '~/Downloads/a.png', width = 8, height = 10)
ggsave(plot = figure, '~/Downloads/a.png', width = 7, height = 10)
drug_exposure_plot = ggplot(dataset %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster_drug), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_manual(values = dataset_color) +
facet_grid(drug~variable, scales = 'free_y') +
guides(fill = 'none')
vaf_deconvolution_plot = ggplot(input_vafs %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_brewer(palette = 'Set1') +
labs(title = which_sbs) +
facet_wrap(~variable, scales = 'free_y')
figure = cowplot::plot_grid(
vaf_deconvolution_plot + labs("Deconvolution"),
drug_exposure_plot  + labs("Signature assignments"),
rel_heights = c(1.5, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(plot = figure, '~/Downloads/a.png', width = 7, height = 10)
input_vafs
drug_exposure_plot = ggplot(dataset %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster_drug), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_manual(values = dataset_color) +
facet_wrap(drug~variable, scales = 'free_y') +
guides(fill = 'none')
vaf_deconvolution_plot = ggplot(input_vafs %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_brewer(palette = 'Set1') +
labs(title = which_sbs) +
facet_wrap(~variable, scales = 'free_y')
figure = cowplot::plot_grid(
vaf_deconvolution_plot + labs("Deconvolution"),
drug_exposure_plot  + labs("Signature assignments"),
rel_heights = c(1.5, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(plot = figure, '~/Downloads/a.png', width = 7, height = 10)
drug_exposure_plot = ggplot(dataset %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster_drug), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_manual(values = dataset_color) +
facet_grid(drug~variable, scales = 'free_y') +
guides(fill = 'none')
vaf_deconvolution_plot = ggplot(input_vafs %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_brewer(palette = 'Set1') +
labs(title = which_sbs) +
facet_wrap(~variable, scales = 'free_y')
figure = cowplot::plot_grid(
vaf_deconvolution_plot + labs("Deconvolution"),
drug_exposure_plot  + labs("Signature assignments"),
rel_heights = c(1.5, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(plot = figure, '~/Downloads/a.png', width = 7, height = 10)
input_vafs = input_vafs %>% filter(value>0.05)
exposure = alpha$alpha
exposure = exposure/rowSums(exposure)
# Colours
colors = RColorBrewer::brewer.pal(ncol(exposure), 'Set1')
colors = ggsci::pal_nejm()(ncol(exposure))
names(colors) = colnames(exposure)
dataset = lapply(names(colors),
function(which_sbs){
expos_sbs = exposure[, which_sbs]
color_sbs = rep(colors[which_sbs], length(expos_sbs))
names(color_sbs) = names(expos_sbs)
color_sbs = ggplot2::alpha(color_sbs, expos_sbs)
input_vafs %>%
mutate(
color = color_sbs[cluster],
drug = which_sbs
)
}) %>%
Reduce(f = bind_rows) %>%
mutate(
cluster_drug = paste(cluster, drug)
)
# color_vector
dataset_color = dataset %>% distinct(cluster_drug, color) %>% pull(color)
names(dataset_color) = dataset %>% distinct(cluster_drug, color) %>% pull(cluster_drug)
drug_exposure_plot = ggplot(dataset %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster_drug), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_manual(values = dataset_color) +
facet_grid(drug~variable, scales = 'free_y') +
guides(fill = 'none')
vaf_deconvolution_plot = ggplot(input_vafs %>% filter(value>0)) +
geom_histogram(aes(value, fill = cluster), binwidth = 0.01) +
CNAqc:::my_ggplot_theme() +
scale_fill_brewer(palette = 'Set1') +
labs(title = which_sbs) +
facet_wrap(~variable, scales = 'free_y')
figure = cowplot::plot_grid(
vaf_deconvolution_plot + labs("Deconvolution"),
drug_exposure_plot  + labs("Signature assignments"),
rel_heights = c(1.5, 5),
ncol = 1,
align = 'v',
axis = 'lr'
)
ggsave(plot = figure, '~/Downloads/a.png', width = 7, height = 10)
DBOx = '/Volumes/Data/Dropbox/Research Projects/2022. AML/'
readRDS(paste(DBOx, '/Joint_table/UPN10_joint_table'))
DBOx = '/Volumes/Data/Dropbox/Research Projects/2022. AML/'
readRDS(paste(DBOx, '/Joint_table/UPN10_joint_table'))
readRDS(paste0(DBOx, '/Joint_table/UPN10_joint_table'))
readRDS(paste0(DBOx, '/Joint_table/UPN10_joint_table.rds'))
readRDS(paste0(DBOx, '/DATA/Joint_table/UPN10_joint_table.rds'))
DATA = paste0(DBOx, '/DATA')
DATA
DBOx = '/Volumes/Data/Dropbox/Research Projects/2022. AML'
DATA = paste0(DBOx, '/DATA')
readRDS(paste0(DATA, '/Joint_table/', paste0(patient, 'joint_table.rds')))
patient = 'UPN04'
readRDS(paste0(DATA, '/Joint_table/', paste0(patient, 'joint_table.rds')))
readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
x = readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
colnames(x)
sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
x = readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
sample = c("DIA", "PRE", "REL", "REL2")
sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
s_columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
ns_columns = setdiff(colnames(x), s_columns)
ns_columns
s_columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
s_columns
ns_columns = setdiff(colnames(x), s_columns %>% unlist())
ns_columns
s_columns
r_columns
r_columns = colnames(x)
lapply(s_columns, function(s){
x[r_columns[r_columns %in% c(ns_columns, s)]]
})
s_columns
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s)]]
s = s_columns[[ยง]]
s = s_columns[[1]]
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s)]]
y
colnames(y)
s_columns
names(s_columns) = sample
s=sample[1]
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
y
colnames(y)
gsub(pattern = s, replacement = '', colnames(y))
gsub(pattern = paste('\\.', s), replacement = '', colnames(y))
gsub(pattern = paste('\.', s), replacement = '', colnames(y))
gsub(pattern = paste('.', s), replacement = '', colnames(y))
s
gsub(pattern = paste0('.', s), replacement = '', colnames(y))
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y
y %>% View
y = y %>% dplyr::select(id, chr, from, to, ref, alt, is.driver, driver_label, dplyr::everything())
y = y %>% dplyr::select(id, chr, from, to, ref, alt, is_driver, driver_label, dplyr::everything())
y
y %>% view
y %>% View
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
y %>% View
colnames(y) %>% duplicated()
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
colnames(y) %>% duplicated()
y[, !(colnames(y) %>% duplicated())]
y = y[, !(colnames(y) %>% duplicated())]
lapply(sample, function(s){
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(id,
chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
y
y %>% dplyr::select(id,
chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
lapply(sample, function(s){
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(id,
chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
s
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y
y %>% dplyr::select(id,
chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
sample
s_columns
# Extract sample tibble
x = lapply(sample, function(s){
if(length(s_columns[[s]]) == 0) return(NULL)
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(id,
chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
x
names(x) = sample
x
x = readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
r_columns = colnames(x)
# Sample-specific columns
s_columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
names(s_columns) = sample
# General columns
ns_columns = setdiff(colnames(x), s_columns %>% unlist())
# Extract sample tibble
x = lapply(sample, function(s){
if(length(s_columns[[s]]) == 0) return(NULL)
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
names(x) = sample
x
x %>% is.null()
sapply(x, is.null)
x[sapply(x, is.null)]
x[!sapply(x, is.null)]
x = readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
x
if(is.null(sample) || length(sample) == 0) return(x)
r_columns = colnames(x)
r_columns
strsplit(r_columns, '\\.')
sapply(strsplit(r_columns, '\\.'), function(x) x[[length(x)]])
sapply(strsplit(r_columns, '\\.'), function(x) x[[length(x)]]) %>% table
sample = "PRE"
# Split otherwise
r_columns = colnames(x)
# Sample-specific columns
s_columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
names(s_columns) = sample
s_columns
sample
s='PRE'
colnames(x)[endsWith(colnames(x), s)]
# Sample-specific columns
s_columns = sapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
s_columns
# Sample-specific columns
s_columns = lapply(sample, function(s){ colnames(x)[endsWith(colnames(x), s)] })
s_columns
names(s_columns) = sample
# General columns
ns_columns = setdiff(colnames(x), s_columns %>% unlist())
ns_columns
# Extract sample tibble
x = lapply(sample, function(s){
if(length(s_columns[[s]]) == 0) return(NULL)
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
names(x) = sample
x[!sapply(x, is.null)]
x = readRDS(paste0(DATA, '/CNAqc/', paste0(patient, '_CNAqc.rds')))
x
names(x)
sample
(names(x) %in% sample)
x[names(x) %in% sample]
all(!(names(x) %in% sample))
cli::cli_abort("{.field {patient}} has none of samples {.field {sample}}")
readRDS("/Volumes/Data/Dropbox/Research Projects/2022. AML/DATA/diploid_calls/diploid_calls_UPN03.rds")
#######################
# Getters for our data
#######################
DBOx = '/Volumes/Data/Dropbox/Research Projects/2022. AML'
DATA = paste0(DBOx, '/DATA')
# Get mutation data from the joint table. If "extract" is a list of sample IDs,
# data for each sample is returned by removing the sample label on the columns
get_mutations = function(patient, extract = c("DIA", "PRE", "REL", "REL2"))
{
x = readRDS(paste0(DATA, '/Joint_table/', paste0(patient, '_joint_table.rds')))
# Return if sample is null
if(is.null(extract) || length(extract) == 0) return(x)
# Split otherwise
r_columns = colnames(x)
# Sample-specific columns
s_columns = lapply(extract, function(s){ colnames(x)[endsWith(colnames(x), s)] })
names(s_columns) = extract
# General columns
ns_columns = setdiff(colnames(x), s_columns %>% unlist())
# Extract sample tibble
x = lapply(extract, function(s){
if(length(s_columns[[s]]) == 0) return(NULL)
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
names(x) = extract
x[!sapply(x, is.null)]
}
# Get CNAqc objects for a patient, subset by sample.
get_CNAqc = function(patient, sample = c("DIA", "PRE", "REL", "REL2"))
{
x = readRDS(paste0(DATA, '/CNAqc/', paste0(patient, '_CNAqc.rds')))
if(all(!(names(x) %in% sample)))
cli::cli_abort("{.field {patient}} has none of samples {.field {sample}}!")
x[names(x) %in% sample]
}
# get_calls = function()
# {
#
# }
#
# readRDS("/Volumes/Data/Dropbox/Research Projects/2022. AML/DATA/diploid_calls/diploid_calls_UPN03.rds")
get_mutations("UPN011")
get_mutations("UPN11")
x = readRDS("/Volumes/Data/Dropbox/Research Projects/2022. AML/DATA/diploid_calls/diploid_calls_UPN03.rds")
extract = c("DIA", "PRE", "REL", "REL2")
# Split otherwise
r_columns = colnames(x)
r_columns
# Sample-specific columns
s_columns = lapply(extract, function(s){ colnames(x)[endsWith(colnames(x), s)] })
names(s_columns) = extract
s_columns
# General columns
ns_columns = setdiff(colnames(x), s_columns %>% unlist())
# Extract sample tibble
x = lapply(extract, function(s){
if(length(s_columns[[s]]) == 0) return(NULL)
# General + Sample-specific
y = x[r_columns[r_columns %in% c(ns_columns, s_columns[[s]])]]
# Some column become duplicated, we remove them (is this weird?)
colnames(y) = gsub(pattern = paste0('.', s), replacement = '', colnames(y))
y = y[, !(colnames(y) %>% duplicated())]
y %>% dplyr::select(chr,
from,
to,
ref,
alt,
NV,
DP,
VAF,
is_driver,
driver_label,
dplyr::everything())
})
names(x) = extract
x[!sapply(x, is.null)]
